using C1.Win.C1FlexGrid;
using ComLib;
using ComLib.clsMgr;
using System;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;
using SystemControlClassLibrary.UC;

namespace SystemControlClassLibrary.monitoring
{
    public partial class Line2WholeTrk : Form
    {

        ConnectDB cd = new ConnectDB();
        VbFunc vf = new VbFunc();
        clsStyle cs = new clsStyle();
        clsCom ck = new clsCom();

        string ownerNM = "";
        string titleNM = "";

        DataTable moddt = null;

        readonly string line_gp = "#2";
        private DataTable Acltable;
        private bool CanMODAcl;
        private bool CanZoneMoveAcl;
        private UC_WorkShow uC_WorkShow1;

        private TextBox IsConnected = new TextBox();

        private Task t;

        public static string __File()
        {
            var st = new StackTrace(new StackFrame(true));
            var sf = st.GetFrame(0);
            return sf.GetFileName();
        }


        public Line2WholeTrk(string titleNm, string scrAuth, string factCode, string ownerNm)
        {
            ownerNM = ownerNm;
            titleNM = titleNm;

            InitializeComponent();
        }

        private void Line2WholeTrk_Load(object sender, EventArgs e)
        {
            #region button Setup
            btnInsertReg.Tag = "Line2CrtInRsltPopUP";
            btnZoneMove.Tag = "Line2InsRegPopup";
            btnPOCfin.Tag = "Line2POCFinReg";
            btnReWork.Tag = "Line2ProdReWorkMgmt";
            btnRsltCancel.Tag = "Line2WorkRsltCancel";

            Acltable = cd.GetScreeAcl(ck.UserGrp);

            CanMODAcl = Line3WholeTrk.SetModifyACL(Name, Acltable, "MOD_ACL");

            //btnZoneMove.Tag = "Line1InsRegPopup";

            CanZoneMoveAcl = Line3WholeTrk.SetModifyACL(btnZoneMove.Tag.ToString(), Acltable, "REG_ACL");
            #endregion

            ck.StrKey1 = "";

            //uc_zone setting
            UC_Zone_Setup();

            InitGrd();

            WorkControl();

            timer1.Interval = 5000;
            //timer1.Start();
            //timer1_Tick(null, EventArgs.Empty); // Simulate a timer tick event


            // connect indicater
            IsConnected.TextChanged += IsConnected_TextChanged;

            InitButton();

            t = Task.Factory.StartNew(AsyncUpdateUIData);
        }

        private void AsyncUpdateUIData()
        {
            
            while (!IsDisposed)
            {
                // do something
                UpdateUIData();
                //Text = DateTime.Now.ToString();
                //Console.WriteLine(DateTime.Now.ToString());
                System.Threading.Thread.Sleep(TimeSpan.FromSeconds(5));
            }
        }

        private void UpdateUIData()
        {
            // 데이터를 뿌리기전에 디비 연결상태를 확인해서 연결되지않은 상태에서는 접속하지 않게 한다.
            if (!cd.CheckDbConnection())
            {
                IsConnected.Text = "DisConnected";
                this.Enable(false);
                //clsMsg.Log.Alarm(Alarms.Info, clsMsg.Log.__Function(), clsMsg.Log.__Line(), "  " + " 데이터베이스 접속이 해제되었습니다.");
                return;
            }
            else
            {

                this.Enable(true);
                IsConnected.Text = "Connected";
            }


            //cd.CheckDbConnection();
            //현재의 근조 표시
            //SetWorkBinding(line_gp, uC_WorkShow1, this);
            Line3WholeTrk.SetWorkBinding(line_gp, uC_WorkShow1);

            SetDataBinding();

            SetDataBinding_Zone();

            this.Invalidate();
        }

        private void InitButton()
        {
            SetupButton(btnInsertReg, Acltable);
            SetupButton(btnZoneMove, Acltable);
            SetupButton(btnPOCfin, Acltable);
            SetupButton(btnReWork, Acltable);
            SetupButton(btnRsltCancel, Acltable);
        }

        private void IsConnected_TextChanged(object sender, EventArgs e)
        {

            if (IsConnected.Text == "Connected")
            {
                clsMsg.Log.Alarm(Alarms.Info, clsMsg.Log.__Function(), clsMsg.Log.__Line(), "  " + " 데이터베이스 접속되었습니다.");
            }
            else
            {
                clsMsg.Log.Alarm(Alarms.Info, clsMsg.Log.__Function(), clsMsg.Log.__Line(), "  " + " 데이터베이스 접속이 해제되었습니다.");
            }


        }

        private void SetupButton(Button btn, DataTable AclDT)
        {
            string sql = string.Empty;

            sql = string.Format("PAGE_ID = '{0}'", btn.Tag);

            DataRow[] result = AclDT.Select(sql);

            if (result.Length > 0)
            {
                foreach (DataRow row in result)
                {
                    //btn.Enabled = (row["INQ_ACL"].ToString() == "Y");
                    btn.Enabled = (row["REG_ACL"].ToString() == "Y");
                    //btn.Enabled = (row["MOD_ACL"].ToString() == "Y");
                    //btn.Enabled = (row["DEL_ACL"].ToString() == "Y");
                }
            }
            else btn.Enabled = false;
        }


        private void WorkControl()
        {
            #region 유저컨트롤 설정

            uC_WorkShow1 = new SystemControlClassLibrary.UC.UC_WorkShow();

            uC_WorkShow1.BackColor = Color.FromArgb(0, 122, 204);

            uC_WorkShow1.Location = new System.Drawing.Point(1034, 130);
            uC_WorkShow1.Name = "uC_WorkShow1";
            uC_WorkShow1.Size = new System.Drawing.Size(197, 31);
            uC_WorkShow1.TabIndex = 163;
            if (CanMODAcl)
            {
                uC_WorkShow1.PopupPanelEvent += UC_WorkShow1_PopupPanelEvent;
            }
            #endregion

            panel1.Controls.Add(uC_WorkShow1);
        }

        private void UC_WorkShow1_PopupPanelEvent(object sender, EventArgs e)
        {
            Line3WholeTrk.ChangeWork(line_gp, uC_WorkShow1.WorkType, uC_WorkShow1.WorkTeam, this);
        }

        private void UC_Zone_Setup()
        {
            foreach (var item in vf.GetAllChildrens(this))
            {
                if (item.GetType().ToString() == "WindowsFormsApplication15.UC_Zone")
                {
                    var uc_zone = item as WindowsFormsApplication15.UC_Zone;
                    uc_zone.PopupEvent += PopupEvent;

                }
            }
        }

        private void PopupEvent(object sender, EventArgs e)
        {
            ck.StrKey1 = line_gp;

            if (!string.IsNullOrEmpty(((Control)sender).Parent.Name))
            {
                //ck.StrKey2 = ((Control)sender).Parent.Name;

                var uc_zone = (Control)((Control)sender).Parent as WindowsFormsApplication15.UC_Zone;
                ck.StrKey2 = uc_zone.ZoneCD;
            }

            Line3WholeTrk.OpenPopup();
        }



        #region grid 초기화
        private void InitGrd()
        {
            //grdMain1
            InitgrdMain1();

            //grdMain2
            InitgrdMain2();

            //grdMain3
            InitgrdMain3();

            //grdMain6
            InitgrdMain6();
            //grdMain7
            InitgrdMain7();

            //grdMain8
            InitgrdMain8();

            //grdMain9
            InitgrdMain9();

            //grdMain10
            InitgrdMain10();
        }

        private void InitgrdMain1()
        {
            //grdMain1.Cols.Fixed = 1;
            //grdMain1.Rows.Fixed = 1;

            //InitGrid(grdMain1, true);
            cs.InitGrid_search(grdMain1, true);

            //grdMain1.Cols.Fixed = 1;

            grdMain1[0, 0] = grdMain1[0, 1] = "교정";
            grdMain1[1, 0] = "상롤위치";
            grdMain1[2, 0] = "상롤각도";
            grdMain1[3, 0] = "하롤각도";
            grdMain1[4, 0] = "상롤모터(Hz)";
            grdMain1[5, 0] = "하롤모터(Hz)";
            //grdMain1.Rows[0].StyleFixed = c1FlexGrid1.Styles["Fixed1"];

            //CellStyle cs_fix = grdMain1.Styles.Add("Fixed");
            //cs_fix.TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;

            //// row head 설정
            //for (int row = 1; row < grdMain1.Rows.Count; row++) 
            //{
            //    grdMain1.SetCellStyle(row, 0, cs_fix); 

            //}

            grdMain1.AllowMerging = C1.Win.C1FlexGrid.AllowMergingEnum.FixedOnly;
            grdMain1.Rows[0].AllowMerging = true;

            //for (int i = 0; i < grdMain1.Cols.Count; i++)
            //{
            //    grdMain1.Cols[i].AllowMerging = true;

            //}
            grdMain1.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain1.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

            grdMain1.Row = -1;
        }

        private void InitgrdMain2()
        {
            //grdMain2.Cols.Fixed = 1;
            //grdMain2.Rows.Fixed = 1;

            //InitGrid(grdMain2, true);
            cs.InitGrid_search(grdMain2, true);

            grdMain2[0, 0] = grdMain2[0, 1] = "면취";
            grdMain2[1, 0] = "#1스크류(Hz)";
            grdMain2[2, 0] = "#1서보";
            grdMain2[3, 0] = "#2스크류(Hz)";
            grdMain2[4, 0] = "#2서보";

            //grdMain2.Rows[0].StyleFixed = c1FlexGrid1.Styles["Fixed1"];

            //CellStyle cs_fix = grdMain2.Styles.Add("Fixed");
            //cs_fix.TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.LeftCenter;

            //// row head 설정
            //for (int row = 1; row < grdMain2.Rows.Count; row++)
            //{
            //    grdMain2.SetCellStyle(row, 0, cs_fix);

            //}

            grdMain2.AllowMerging = C1.Win.C1FlexGrid.AllowMergingEnum.FixedOnly;
            grdMain2.Rows[0].AllowMerging = true;

            //for (int i = 0; i < grdMain2.Cols.Count; i++)
            //{
            //    grdMain2.Cols[i].AllowMerging = true;

            //}
            grdMain2.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain2.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

            grdMain2.Row = -1;
        }

        private void InitgrdMain3()
        {
            cs.InitGrid_search(grdMain3, true);

            //grdMain3.Cols.Fixed = 1;

            //grdMain3[0, 0] = "비파괴";
            //grdMain3[1, 0] = "PRII";
            grdMain3[1, 0] = "MAT";
            grdMain3[2, 0] = "MLFT";
            grdMain3[3, 0] = "UT";

            grdMain3.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain3.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain3.Cols[2].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain3.AllowMerging = C1.Win.C1FlexGrid.AllowMergingEnum.Custom;

            //grdMain3.MergedRanges.Add(grdMain3.GetCellRange(1, 2, 4, 2));
            grdMain3.MergedRanges.Add(grdMain3.GetCellRange(1, 2, 3, 2));

            grdMain3.Cols[2].AllowMerging = true;
            grdMain3.Row = -1;


        }

        private void InitgrdMain6()
        {
            //InitGrid(grdMain6, true);
            cs.InitGrid_search(grdMain6, true);


            grdMain6.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain6.Cols[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain6.Cols[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

            grdMain6.Row = -1;
        }

        private void InitgrdMain7()
        {
            cs.InitGrid_search(grdMain7, true, 1, 0);

            grdMain7[0, 0] = "압연번들번호"; grdMain7[0, 1] = "압연본수"; grdMain7[0, 2] = "교정본수";

            grdMain7.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain7.Cols["MILL_NO"].TextAlign = cs.MILL_NO_TextAlign;
            grdMain7.Cols["MILL_PCS"].TextAlign = cs.MILL_PCS_TextAlign;
            grdMain7.Cols["STR_PCS"].TextAlign = cs.STR_PCS_TextAlign;


        }

        private void InitgrdMain8()
        {
            cs.InitGrid_search(grdMain8, true);

            grdMain8.Cols["STEEL_NM"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain8.Cols["HEAT"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain8.Cols["ITEM_SIZE"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain8.Cols["LENGTH"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;
            grdMain8.Cols["SURFACE_LEVEL"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain8.Cols["POC_NO"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain8.Row = -1;
        }

        private void InitgrdMain9()
        {
            cs.InitGrid_search(grdMain9, true, 2, 1);

            grdMain9[1, 0] = grdMain9[0, 0] = "압연번들번호";
            grdMain9[1, 1] = grdMain9[0, 1] = " 압연\n본수";
            grdMain9[1, 2] = grdMain9[0, 2] = " 교정\n본수";
            grdMain9[1, 3] = grdMain9[0, 3] = " 면취\n본수";
            grdMain9[1, 4] = grdMain9[0, 4] = " 쇼트\n본수";
            grdMain9[0, 5] = "MAT";
            grdMain9[1, 5] = "NG";

            grdMain9[0, 6] = "MLFT";
            grdMain9[1, 6] = "NG";

            grdMain9[0, 7] = "UT";
            grdMain9[1, 7] = "NG";

            grdMain9[0, 8] = grdMain9[1, 8] = " NG\n본수";


            grdMain9.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain9.Rows[1].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain9.Cols["MILL_NO"].TextAlign = cs.MILL_NO_TextAlign;
            grdMain9.Cols["MILL_PCS"].TextAlign = cs.MILL_PCS_TextAlign;
            grdMain9.Cols["MAT_NG_PCS"].TextAlign = cs.PCS_TextAlign;
            grdMain9.Cols["MLFT_NG_PCS"].TextAlign = cs.PCS_TextAlign;
            grdMain9.Cols["UT_NG_PCS"].TextAlign = cs.PCS_TextAlign;
            grdMain9.Cols["NDT_NG_PCS"].TextAlign = cs.PCS_TextAlign;


            grdMain9.AllowMerging = C1.Win.C1FlexGrid.AllowMergingEnum.FixedOnly;
            //c1FlexGrid8.Rows[1].AllowMerging = C1.Win.C1FlexGrid.AllowMergingEnum.FixedOnly;
            //c1FlexGrid8.Rows[0].AllowMerging = c1FlexGrid8.Rows[1].AllowMerging = true;

            for (int i = 0; i < grdMain9.Cols.Count; i++)
            {
                grdMain9.Cols[i].AllowMerging = true;

            }

            grdMain9.Rows[0].AllowMerging = true;

            grdMain9.Row = -1;
        }

        private void InitgrdMain10()
        {
            cs.InitGrid_search(grdMain10, true);

            grdMain10.Rows[0].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;

            grdMain10.Cols["BUNDLE_NO"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;
            grdMain10.Cols["PCS"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.CenterCenter;
            grdMain10.Cols["THEORY_WGT"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;
            grdMain10.Cols["NET_WGT"].TextAlign = C1.Win.C1FlexGrid.TextAlignEnum.RightCenter;

            grdMain10.Row = -1;
        } 
        #endregion

        private void timer1_Tick(object p, EventArgs empty)
        {

            
        }

        private void SetDataBinding()
        {
            SetDataBinding_grdMain1();

            SetDataBinding_grdMain2();

            SetDataBinding_grdMain3();

            SetDataBinding_grdMain6();

            // grdMain7
            SetDataBinding_grdMain7();

            //grdMain8
            SetDataBinding_grdMain8();

            //grdMain9
            SetDataBinding_grdMain9();
            //각 위치에 데이터 입력한다. 

            SetDataBinding_grdMain10();
        }

        private void SetDataBinding_grdMain1()
        {
            string sql1 = string.Empty;
            sql1 += string.Format("SELECT A.TOP_ROLL_POS_ACTV       ");//--상롤위치
            sql1 += string.Format("      ,A.TOP_ROLL_ANGLE_ACTV     ");//--상롤각도
            sql1 += string.Format("      ,A.BOT_ROLL_ANGLE_ACTV     ");//--하롤각도
            sql1 += string.Format("      ,A.TOP_ROLL_MTR_RPM_ACTV   ");//--상롤모터(RPM)
            sql1 += string.Format("      ,A.BOT_ROLL_MTR_RPM_ACTV   ");//--하롤모터(RPM)
            sql1 += string.Format("FROM   TB_STR_OPERINFO_NO2 A ");
            sql1 += string.Format("      ,TB_CR_INPUT_WR B ");
            sql1 += string.Format("WHERE  WORK_DDTT = (SELECT MAX(WORK_DDTT) FROM   TB_STR_OPERINFO_NO2) ");
            sql1 += string.Format("AND    A.MILL_NO    = B.MILL_NO ");
            sql1 += string.Format("AND    B.POC_NO     = ( SELECT MAX(POC_NO)  ");
            sql1 += string.Format("                        FROM   TB_RL_TM_TRACKING ");
            sql1 += string.Format("                        WHERE  PROG_STAT   IN ('RUN','WAT','FIN') ");
            sql1 += string.Format("                        AND    LINE_GP     = '{0}' ) ", line_gp);


            moddt = cd.FindDataTable(sql1);
            if (moddt != null && moddt.Rows.Count > 0)
            {
                //this.Cursor = System.Windows.Forms.Cursors.AppStarting;
                grdMain1[1, 1] = moddt.Rows[0]["TOP_ROLL_POS_ACTV"];
                grdMain1[2, 1] = moddt.Rows[0]["TOP_ROLL_ANGLE_ACTV"];
                grdMain1[3, 1] = moddt.Rows[0]["BOT_ROLL_ANGLE_ACTV"];
                grdMain1[4, 1] = moddt.Rows[0]["TOP_ROLL_MTR_RPM_ACTV"];
                grdMain1[5, 1] = moddt.Rows[0]["BOT_ROLL_MTR_RPM_ACTV"];
                //this.Cursor = System.Windows.Forms.Cursors.Default;
            }
            else
            {
                grdMain1[1, 1] = string.Empty;
                grdMain1[2, 1] = string.Empty;
                grdMain1[3, 1] = string.Empty;
                grdMain1[4, 1] = string.Empty;
                grdMain1[5, 1] = string.Empty;
            }

            // 데이터가 그리드에 뿌려지고 첫번째 행이 선택 된상황을 만듬;
            //grdMain_Row_Selected(grdMain.Row);
            //grdMain1.Row = -1;
            SetGridRowSelect(grdMain1, -1);
            return;
        }

        private void SetDataBinding_grdMain6()
        {

            string sql1 = string.Empty;
            sql1 += string.Format("SELECT BUNDLE_NO ");
            sql1 += string.Format("      ,PCS ");
            sql1 += string.Format("FROM   TB_BND_WR  A ");
            sql1 += string.Format("WHERE  LINE_GP     = '{0}' ", line_gp);
            sql1 += string.Format("AND    REG_DDTT   = (SELECT MAX(REG_DDTT)  FROM TB_BND_WR ");
            sql1 += string.Format("                     WHERE  LINE_GP   = A.LINE_GP ");
            sql1 += string.Format("                     AND    NVL(DEL_YN,'N') <> 'Y') ");
            sql1 += string.Format("AND    NVL(A.DEL_YN,'N') <> 'Y' ");
            sql1 += string.Format("AND    ROWNUM      = 1 ");

            moddt = cd.FindDataTable(sql1);

            if (moddt != null)
            {
                try
                {
                    grdMain6.SetDataBinding(moddt, null, true);
                }
                catch (Exception)
                {

                    return;
                }
                //grdMain6.SetDataBinding(moddt, null, true);
            }

            SetGridRowSelect(grdMain6, -1);
        }

        private void SetDataBinding_grdMain2()
        {


            string sql1 = string.Empty;
            sql1 += string.Format(" SELECT A.SCREW_FEED_HZ_ACTV_1    ");   //--#1스크류(Hz)
            sql1 += string.Format("       ,A.SERVO_ACTV_1            ");   //--#1서보
            sql1 += string.Format("       ,A.SCREW_FEED_HZ_ACTV_2    ");   //--#2TMZMFB(Hz)
            sql1 += string.Format("       ,A.SERVO_ACTV_2            ");   //--#2서보
            sql1 += string.Format(" FROM   TB_CHF_OPERINFO_NO2 A ");
            sql1 += string.Format("       ,TB_CR_INPUT_WR B ");
            sql1 += string.Format(" WHERE  WORK_DDTT = (SELECT MAX(WORK_DDTT) FROM   TB_CHF_OPERINFO_NO2) ");
            sql1 += string.Format(" AND    A.MILL_NO    = B.MILL_NO ");
            sql1 += string.Format(" AND    B.POC_NO     = ( SELECT MAX(POC_NO)  ");
            sql1 += string.Format("                         FROM   TB_RL_TM_TRACKING ");
            sql1 += string.Format("                         WHERE  PROG_STAT   IN ('RUN','WAT','FIN') ");
            sql1 += string.Format("                         AND    LINE_GP     = :P_LINE_GP ) ");

            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            //moddt = cd.FindDataTable(sql1);
            if (moddt != null && moddt.Rows.Count > 0)
            {
                //this.Cursor = System.Windows.Forms.Cursors.AppStarting;
                grdMain2[1, 1] = moddt.Rows[0]["SCREW_FEED_HZ_ACTV_1"];
                grdMain2[2, 1] = moddt.Rows[0]["SERVO_ACTV_1"];
                grdMain2[3, 1] = moddt.Rows[0]["SCREW_FEED_HZ_ACTV_2"];
                grdMain2[4, 1] = moddt.Rows[0]["SERVO_ACTV_2"];

                //this.Cursor = System.Windows.Forms.Cursors.Default;
            }
            else
            {
                grdMain2[1, 1] = string.Empty;
                grdMain2[2, 1] = string.Empty;
                grdMain2[3, 1] = string.Empty;
                grdMain2[4, 1] = string.Empty;
            }

            // 데이터가 그리드에 뿌려지고 첫번째 행이 선택 된상황을 만듬;
            //grdMain_Row_Selected(grdMain.Row);
            //grdMain2.Row = -1;
            SetGridRowSelect(grdMain2, -1);
            return;
        }

        private void SetDataBinding_grdMain3()
        {
            string sql1 = string.Empty;
            sql1 += string.Format("SELECT X.MILL_NO AS MILL_NO ");
            sql1 += string.Format("      ,X.PIECE_NO AS PIECE_NO ");
            sql1 += string.Format("      ,(SELECT CD_NM FROM TB_CM_COM_CD WHERE CATEGORY = 'GOOD_NG' AND CD_ID = X.PRII_GOOD_NG) AS PRII_GOOD_NG ");
            sql1 += string.Format("      ,(SELECT CD_NM FROM TB_CM_COM_CD WHERE CATEGORY = 'GOOD_NG' AND CD_ID = X.MAT_GOOD_NG) AS MAT_GOOD_NG ");
            sql1 += string.Format("      ,(SELECT CD_NM FROM TB_CM_COM_CD WHERE CATEGORY = 'GOOD_NG' AND CD_ID = X.MLFT_GOOD_NG) AS MLFT_GOOD_NG ");
            sql1 += string.Format("      ,(SELECT CD_NM FROM TB_CM_COM_CD WHERE CATEGORY = 'GOOD_NG' AND CD_ID = X.UT_GOOD_NG) AS UT_GOOD_NG ");
            sql1 += string.Format("FROM ( ");
            sql1 += string.Format("SELECT MILL_NO ");
            sql1 += string.Format("      ,PIECE_NO ");
            sql1 += string.Format("      ,(SELECT GOOD_YN FROM TB_CR_PIECE_WR ");
            sql1 += string.Format("        WHERE MILL_NO = A.MILL_NO AND PIECE_NO   = A.PIECE_NO ");
            sql1 += string.Format("        AND   LINE_GP = A.LINE_GP AND ROUTING_CD = 'D2' AND REWORK_SEQ = A.REWORK_SEQ) AS PRII_GOOD_NG ");
            sql1 += string.Format("      ,MAT_GOOD_NG ");
            sql1 += string.Format("      ,MLFT_GOOD_NG ");
            sql1 += string.Format("      ,UT_GOOD_NG ");
            sql1 += string.Format("FROM   TB_CR_PIECE_WR A ");
            sql1 += string.Format("WHERE  LINE_GP     = :P_LINE_GP ");
            sql1 += string.Format("AND    ROUTING_CD  = 'F2' ");
            sql1 += string.Format("AND    EXIT_DDTT   = (SELECT MAX(EXIT_DDTT) FROM TB_CR_PIECE_WR ");
            sql1 += string.Format("                      WHERE  LINE_GP    = A.LINE_GP ");
            sql1 += string.Format("                      AND    ROUTING_CD = A.ROUTING_CD) ");
            sql1 += string.Format("AND    ROWNUM      = 1 ");
            sql1 += string.Format(") X ");

            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);


            if (moddt != null && moddt.Rows.Count > 0)
            {
                //this.Cursor = System.Windows.Forms.Cursors.AppStarting;
                grdMain3[1, 1] = moddt.Rows[0]["MAT_GOOD_NG"];
                grdMain3[2, 1] = moddt.Rows[0]["MLFT_GOOD_NG"];
                grdMain3[3, 1] = moddt.Rows[0]["UT_GOOD_NG"];
                grdMain3[1, 2] = grdMain3[2, 2] = grdMain3[3, 2] = moddt.Rows[0]["PIECE_NO"];
                //this.Cursor = System.Windows.Forms.Cursors.Default;
            }
            else
            {
                grdMain3[1, 1] = string.Empty;
                grdMain3[2, 1] = string.Empty;
                grdMain3[3, 1] = string.Empty;
                grdMain3[1, 2] = string.Empty;
            }


            SetGridRowSelect(grdMain3, -1);
        }

        private void SetDataBinding_grdMain7()
        {

            string sql1 = string.Empty;
            sql1 = cd.GetReadyBundlesql();

            //moddt = new DataTable();
            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            if (moddt != null)
            {
                try
                {
                    grdMain7.SetDataBinding(moddt, null, true);
                }
                catch (Exception)
                {

                    return;
                }
            }
            SetGridRowSelect(grdMain7, -1);
        }

        private void SetDataBinding_grdMain8()
        {

            string sql1 = string.Empty;
            //--실시간트레킹중간_POC정보 공통쿼리를 가져온다
            sql1 = cd.GetPOCsql();

            //moddt = new DataTable();

            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            if (moddt != null)
            {
                try
                {
                    grdMain8.SetDataBinding(moddt, null, true);
                }
                catch (Exception)
                {

                    return;
                }
                //grdMain8.SetDataBinding(moddt, null, true);
            }

            //this.Cursor = System.Windows.Forms.Cursors.AppStarting;

            //this.Cursor = System.Windows.Forms.Cursors.Default;
            SetGridRowSelect(grdMain8, -1);
        }

        private void SetDataBinding_grdMain9()
        {
            string sql1 = string.Empty;
            sql1 += string.Format("SELECT X.MILL_NO ");
            sql1 += string.Format("      ,NVL(Y.PCS, 0) AS MILL_PCS ");
            sql1 += string.Format("      ,STR_PCS ");
            sql1 += string.Format("      ,SHF_PCS ");
            sql1 += string.Format("      ,SHT_PCS ");
            sql1 += string.Format("      ,MAT_NG_PCS ");
            sql1 += string.Format("      ,MLFT_NG_PCS ");
            sql1 += string.Format("      ,UT_NG_PCS ");
            sql1 += string.Format("      ,NDT_NG_PCS ");
            sql1 += string.Format("FROM   TB_CR_ORD_BUNDLEINFO Y ");
            sql1 += string.Format("      ,(SELECT MILL_NO ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'F2',DECODE(A.MAT_GOOD_NG,'NG',1,0 ) ) ), 0) AS MAT_NG_PCS ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'F2',DECODE(A.MLFT_GOOD_NG,'NG',DECODE(A.MAT_GOOD_NG,'NG',0,DECODE(A.UT_GOOD_NG,'NG',0,1 ) ),0 ) ) ), 0 )  AS MLFT_NG_PCS ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'F2',DECODE(A.UT_GOOD_NG,'NG',DECODE(A.MAT_GOOD_NG,'NG',0,1),0))  ), 0) AS UT_NG_PCS ");
            sql1 += string.Format("              ,NVL(SUM(CASE WHEN A.MAT_GOOD_NG = 'NG' OR A.MLFT_GOOD_NG = 'NG' OR A.UT_GOOD_NG = 'NG' THEN 1 ");
            sql1 += string.Format("                    ELSE 0  END), 0) AS NDT_NG_PCS ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'A1',1,0)),0) AS STR_PCS ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'B1',1,0)),0) AS SHF_PCS ");
            sql1 += string.Format("              ,NVL(SUM(DECODE(A.ROUTING_CD,'C1',1,0)),0) AS SHT_PCS ");
            sql1 += string.Format("              ,MAX(REG_DDTT)  AS REG_DDTT ");
            sql1 += string.Format("        FROM   TB_CR_PIECE_WR A ");
            sql1 += string.Format("              ,(SELECT DISTINCT POC_NO AS POC_NO ");
            sql1 += string.Format("                FROM   TB_RL_TM_TRACKING ");
            sql1 += string.Format("                WHERE  PROG_STAT   IN ('RUN','WAT','FIN') ");
            sql1 += string.Format("                AND    LINE_GP     =  :P_LINE_GP ");
            sql1 += string.Format("                AND    ROWNUM      = 1 ) B ");
            sql1 += string.Format("        WHERE  A.LINE_GP     =  :P_LINE_GP ");
            sql1 += string.Format("        AND    A.POC_NO      = B.POC_NO ");
            sql1 += string.Format("        AND    A.REWORK_SEQ  = (SELECT MAX(REWORK_SEQ) FROM TB_CR_PIECE_WR ");
            sql1 += string.Format("                                WHERE  MILL_NO    = A.MILL_NO ");
            sql1 += string.Format("                                AND    PIECE_NO   = A.PIECE_NO ");
            sql1 += string.Format("                                AND    LINE_GP    = A.LINE_GP ");
            sql1 += string.Format("                                AND    ROUTING_CD = A.ROUTING_CD) ");
            sql1 += string.Format("        AND    A.ROUTING_CD  IN ('A1','B1','C1','D2','F2','H2','K2') "); //D2: PRII, F2:NDT, H2:MPI, K2: G/R
            sql1 += string.Format("        GROUP BY MILL_NO ");
            sql1 += string.Format("        ORDER BY REG_DDTT DESC ) X ");
            sql1 += string.Format("WHERE  X.MILL_NO  = Y.MILL_NO ");
            sql1 += string.Format("AND    ROWNUM < 5 ");

            //moddt = new DataTable();
            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            if (moddt != null )
            {
                try
                {
                    grdMain9.SetDataBinding(moddt, null, true);
                }
                catch (Exception)
                {

                    return;
                }
                //grdMain9.SetDataBinding(moddt, null, true);
            }
            SetGridRowSelect(grdMain9, -1);
        }

        private void SetDataBinding_grdMain10()
        {
            string sql1 = string.Empty;
            sql1 += string.Format("SELECT X.* ");
            sql1 += string.Format("FROM  ( ");
            sql1 += string.Format("    SELECT A.POC_NO ");
            sql1 += string.Format("          ,A.BUNDLE_NO ");
            sql1 += string.Format("          ,A.PCS ");
            sql1 += string.Format("          ,A.THEORY_WGT ");
            sql1 += string.Format("          ,A.NET_WGT ");
            sql1 += string.Format("          ,A.REG_DDTT ");
            sql1 += string.Format("    FROM   TB_BND_WR A ");
            sql1 += string.Format("    WHERE  A.MFG_DATE > TO_CHAR(SYSDATE-1,'YYYYMMDD') ");
            sql1 += string.Format("    AND    A.LINE_GP  =  :P_LINE_GP ");
            sql1 += string.Format("    AND    A.POC_NO = ( SELECT DISTINCT POC_NO AS POC_NO ");
            sql1 += string.Format("                        FROM   TB_RL_TM_TRACKING ");
            sql1 += string.Format("                        WHERE  PROG_STAT   IN ('RUN','WAT') ");
            sql1 += string.Format("                        AND    LINE_GP     =  :P_LINE_GP ");
            sql1 += string.Format("                        AND    ROWNUM      = 1 ) ");
            sql1 += string.Format("    AND    NVL(A.DEL_YN,'N') <> 'Y' ");
            sql1 += string.Format("    ORDER BY REG_DDTT DESC ");
            sql1 += string.Format(") X ");
            sql1 += string.Format("WHERE ROWNUM < 11 ");


            //moddt = new DataTable();
            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            if (moddt != null)
            {
                try
                {
                    grdMain10.SetDataBinding(moddt, null, true);
                }
                catch (Exception)
                {

                    return;
                }
                //grdMain10.SetDataBinding(moddt, null, true);
            }

            SetGridRowSelect(grdMain10, -1);

            // 데이터가 그리드에 뿌려지고 첫번째 행이 선택 된상황을 만듬;
            //grdMain_Row_Selected(grdMain.Row);
            //grdMain10.Row = -1;
            return;
        }

        delegate void SetGridRowSelectCallback(C1FlexGrid grid, int selectrow);

        public void SetGridRowSelect(C1FlexGrid grid, int selectrow)
        {
            // InvokeRequired required compares the thread ID of the
            // calling thread to the thread ID of the creating thread.
            // If these threads are different, it returns true.
            if (grid.InvokeRequired)
            {
                SetGridRowSelectCallback d = new SetGridRowSelectCallback(SetGridRowSelect);
                this.Invoke(d, new object[] { grid, selectrow });
            }
            else
            {
                grid.Row = selectrow;
            }
        }

        private void SetDataBinding_Zone()
        {

            string sql1 = string.Empty;
            sql1 = cd.GetZoneDatasql();

            string[] parm = new string[1];
            parm[0] = ":P_LINE_GP|" + line_gp;

            moddt = cd.FindDataTable(sql1, parm);

            if (moddt != null)
            {
                foreach (var item in vf.GetAllChildrens(this))
                {
                    if (item.GetType().ToString() == "WindowsFormsApplication15.UC_Zone")
                    {
                        var uc_zone = item as WindowsFormsApplication15.UC_Zone;
                        //zone 초기화
                        uc_zone.PCS = "";
                        uc_zone.MillNo = "";

                        foreach (DataRow row in moddt.Rows)
                        {

                            if (uc_zone.ZoneCD == row["ZONE_CD"].ToString())
                            {
                                if (uc_zone.ZoneCD == "2Z25")
                                {
                                    uc_zone.PCS = row["BUNDLE_PCS"].ToString();
                                    uc_zone.MillNo = row["BUNDLE_NO"].ToString();
                                }
                                else
                                {
                                    uc_zone.PCS = row["PCS"].ToString();
                                    uc_zone.MillNo = row["MILL_NO"].ToString();
                                }
                            }

                        }
                    }
                }
            }

        }

        private void btnInsertReg_Click(object sender, EventArgs e)
        {
            Line3WholeTrk.InSertCRT(line_gp);
        }

        private void btnZoneMove_Click(object sender, EventArgs e)
        {
            ck.StrKey1 = line_gp;

            ck.StrKey2 = "";

            Line3WholeTrk.OpenPopup();
        }

        private void btnPOCFin_Click(object sender, EventArgs e)
        {
            Line3WholeTrk.POCFinREG(line_gp);
        }

        private void btnReWork_Click(object sender, EventArgs e)
        {
            Line3WholeTrk.ReWorkMgmt(line_gp);
        }

        private void btnRsltCancel_Click(object sender, EventArgs e)
        {
            // 현재 grdMain8의 행이 있다면, 첫행의 poc no를 가져와 초기검색에 사용
            string poc_No = string.Empty;

            if (grdMain8.Rows.Count > 1)
            {
                poc_No = grdMain8.GetData(1, "POC_NO").ToString().Trim();
            }

            Line3WholeTrk.RsltCancel(line_gp, poc_No);
        }

        private void btnDisplay_Click(object sender, EventArgs e)
        {
            UpdateUIData();
        }

    }

}